/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace VehicleManagement {
  export type VehicleStruct = {
    vehicleId: BigNumberish;
    owner: AddressLike;
    model: BytesLike;
    purchaseDate: BigNumberish;
    vin: BytesLike;
    color: BytesLike;
    plateNumber: BytesLike;
    createdAt: BigNumberish;
    updatedAt: BigNumberish;
  };

  export type VehicleStructOutput = [
    vehicleId: bigint,
    owner: string,
    model: string,
    purchaseDate: bigint,
    vin: string,
    color: string,
    plateNumber: string,
    createdAt: bigint,
    updatedAt: bigint
  ] & {
    vehicleId: bigint;
    owner: string;
    model: string;
    purchaseDate: bigint;
    vin: string;
    color: string;
    plateNumber: string;
    createdAt: bigint;
    updatedAt: bigint;
  };
}

export interface VehicleManagementInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getVehicleByAccount"
      | "getVehicleByVehicleId"
      | "owner"
      | "registerVehicle"
      | "renounceOwnership"
      | "transferOwnership"
      | "userVehicleMap"
      | "vehicle"
      | "vehicles"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "OwnershipTransferred" | "VehicleRegistered"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "getVehicleByAccount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVehicleByVehicleId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "registerVehicle",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userVehicleMap",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "vehicle",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "vehicles",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "getVehicleByAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVehicleByVehicleId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerVehicle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userVehicleMap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vehicle", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vehicles", data: BytesLike): Result;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VehicleRegisteredEvent {
  export type InputTuple = [
    vehicleId: BigNumberish,
    owner: AddressLike,
    model: BytesLike
  ];
  export type OutputTuple = [vehicleId: bigint, owner: string, model: string];
  export interface OutputObject {
    vehicleId: bigint;
    owner: string;
    model: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface VehicleManagement extends BaseContract {
  connect(runner?: ContractRunner | null): VehicleManagement;
  waitForDeployment(): Promise<this>;

  interface: VehicleManagementInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getVehicleByAccount: TypedContractMethod<
    [],
    [VehicleManagement.VehicleStructOutput[]],
    "view"
  >;

  getVehicleByVehicleId: TypedContractMethod<
    [vehicleId: BigNumberish],
    [VehicleManagement.VehicleStructOutput],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  registerVehicle: TypedContractMethod<[data: BytesLike], [void], "nonpayable">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  userVehicleMap: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        bigint,
        string,
        string,
        string,
        bigint,
        bigint
      ] & {
        vehicleId: bigint;
        owner: string;
        model: string;
        purchaseDate: bigint;
        vin: string;
        color: string;
        plateNumber: string;
        createdAt: bigint;
        updatedAt: bigint;
      }
    ],
    "view"
  >;

  vehicle: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        bigint,
        string,
        string,
        string,
        bigint,
        bigint
      ] & {
        vehicleId: bigint;
        owner: string;
        model: string;
        purchaseDate: bigint;
        vin: string;
        color: string;
        plateNumber: string;
        createdAt: bigint;
        updatedAt: bigint;
      }
    ],
    "view"
  >;

  vehicles: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        bigint,
        string,
        string,
        string,
        bigint,
        bigint
      ] & {
        vehicleId: bigint;
        owner: string;
        model: string;
        purchaseDate: bigint;
        vin: string;
        color: string;
        plateNumber: string;
        createdAt: bigint;
        updatedAt: bigint;
      }
    ],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getVehicleByAccount"
  ): TypedContractMethod<[], [VehicleManagement.VehicleStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "getVehicleByVehicleId"
  ): TypedContractMethod<
    [vehicleId: BigNumberish],
    [VehicleManagement.VehicleStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "registerVehicle"
  ): TypedContractMethod<[data: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "userVehicleMap"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        bigint,
        string,
        string,
        string,
        bigint,
        bigint
      ] & {
        vehicleId: bigint;
        owner: string;
        model: string;
        purchaseDate: bigint;
        vin: string;
        color: string;
        plateNumber: string;
        createdAt: bigint;
        updatedAt: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "vehicle"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        bigint,
        string,
        string,
        string,
        bigint,
        bigint
      ] & {
        vehicleId: bigint;
        owner: string;
        model: string;
        purchaseDate: bigint;
        vin: string;
        color: string;
        plateNumber: string;
        createdAt: bigint;
        updatedAt: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "vehicles"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        bigint,
        string,
        string,
        string,
        bigint,
        bigint
      ] & {
        vehicleId: bigint;
        owner: string;
        model: string;
        purchaseDate: bigint;
        vin: string;
        color: string;
        plateNumber: string;
        createdAt: bigint;
        updatedAt: bigint;
      }
    ],
    "view"
  >;

  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "VehicleRegistered"
  ): TypedContractEvent<
    VehicleRegisteredEvent.InputTuple,
    VehicleRegisteredEvent.OutputTuple,
    VehicleRegisteredEvent.OutputObject
  >;

  filters: {
    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "VehicleRegistered(uint256,address,bytes32)": TypedContractEvent<
      VehicleRegisteredEvent.InputTuple,
      VehicleRegisteredEvent.OutputTuple,
      VehicleRegisteredEvent.OutputObject
    >;
    VehicleRegistered: TypedContractEvent<
      VehicleRegisteredEvent.InputTuple,
      VehicleRegisteredEvent.OutputTuple,
      VehicleRegisteredEvent.OutputObject
    >;
  };
}
