/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace PolicyManagement {
  export type ClaimStruct = {
    policyId: BigNumberish;
    claimAmount: BigNumberish;
    reason: BytesLike;
    status: BigNumberish;
    insurers: AddressLike[];
    claimAmounts: BigNumberish[];
    createdBy: AddressLike;
    createdAt: BigNumberish;
    updatedAt: BigNumberish;
  };

  export type ClaimStructOutput = [
    policyId: bigint,
    claimAmount: bigint,
    reason: string,
    status: bigint,
    insurers: string[],
    claimAmounts: bigint[],
    createdBy: string,
    createdAt: bigint,
    updatedAt: bigint
  ] & {
    policyId: bigint;
    claimAmount: bigint;
    reason: string;
    status: bigint;
    insurers: string[];
    claimAmounts: bigint[];
    createdBy: string;
    createdAt: bigint;
    updatedAt: bigint;
  };

  export type PolicyStruct = {
    vehicleId: BigNumberish;
    insurers: AddressLike[];
    quotationIds: BigNumberish[];
    premium: BigNumberish;
    coverage: BigNumberish;
    status: BigNumberish;
    user: AddressLike;
    coverageUsed: BigNumberish;
    coverageRemaining: BigNumberish;
    createdAt: BigNumberish;
    updatedAt: BigNumberish;
  };

  export type PolicyStructOutput = [
    vehicleId: bigint,
    insurers: string[],
    quotationIds: bigint[],
    premium: bigint,
    coverage: bigint,
    status: bigint,
    user: string,
    coverageUsed: bigint,
    coverageRemaining: bigint,
    createdAt: bigint,
    updatedAt: bigint
  ] & {
    vehicleId: bigint;
    insurers: string[];
    quotationIds: bigint[];
    premium: bigint;
    coverage: bigint;
    status: bigint;
    user: string;
    coverageUsed: bigint;
    coverageRemaining: bigint;
    createdAt: bigint;
    updatedAt: bigint;
  };

  export type QuotationStruct = {
    quotationId: BigNumberish;
    chain: BigNumberish;
    premium: BigNumberish;
    insurer: AddressLike;
    coverage: BigNumberish;
    coverageUsed: BigNumberish;
    createdAt: BigNumberish;
    updatedAt: BigNumberish;
  };

  export type QuotationStructOutput = [
    quotationId: bigint,
    chain: bigint,
    premium: bigint,
    insurer: string,
    coverage: bigint,
    coverageUsed: bigint,
    createdAt: bigint,
    updatedAt: bigint
  ] & {
    quotationId: bigint;
    chain: bigint;
    premium: bigint;
    insurer: string;
    coverage: bigint;
    coverageUsed: bigint;
    createdAt: bigint;
    updatedAt: bigint;
  };
}

export interface PolicyManagementInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addQuotation"
      | "approveClaim"
      | "claims"
      | "createPolicy"
      | "denyClaim"
      | "getClaim"
      | "getInsurerPolicies"
      | "getPolicy"
      | "getPolicyClaims"
      | "getQuotations"
      | "getUserPolicies"
      | "insurerPolicies"
      | "policies"
      | "policyClaims"
      | "quotationList"
      | "quotations"
      | "requestClaim"
      | "updateQuotation"
      | "userPolicies"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ClaimRequested"
      | "ClaimStatusUpdated"
      | "PolicyCreated"
      | "QuotationAdded"
      | "QuotationUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addQuotation",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "approveClaim",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claims",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createPolicy",
    values: [BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "denyClaim",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getClaim",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getInsurerPolicies",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPolicy",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPolicyClaims",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getQuotations",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserPolicies",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "insurerPolicies",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "policies",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "policyClaims",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "quotationList",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "quotations",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "requestClaim",
    values: [BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateQuotation",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userPolicies",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "addQuotation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approveClaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claims", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createPolicy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "denyClaim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getClaim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getInsurerPolicies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPolicy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPolicyClaims",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getQuotations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserPolicies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "insurerPolicies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "policies", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "policyClaims",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "quotationList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "quotations", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "requestClaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateQuotation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userPolicies",
    data: BytesLike
  ): Result;
}

export namespace ClaimRequestedEvent {
  export type InputTuple = [
    policyId: BigNumberish,
    claimId: BigNumberish,
    claimAmount: BigNumberish,
    status: BigNumberish
  ];
  export type OutputTuple = [
    policyId: bigint,
    claimId: bigint,
    claimAmount: bigint,
    status: bigint
  ];
  export interface OutputObject {
    policyId: bigint;
    claimId: bigint;
    claimAmount: bigint;
    status: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ClaimStatusUpdatedEvent {
  export type InputTuple = [claimId: BigNumberish, status: BigNumberish];
  export type OutputTuple = [claimId: bigint, status: bigint];
  export interface OutputObject {
    claimId: bigint;
    status: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PolicyCreatedEvent {
  export type InputTuple = [
    policyId: BigNumberish,
    vehicleId: BigNumberish,
    premium: BigNumberish,
    coverage: BigNumberish,
    user: AddressLike,
    insurers: AddressLike[]
  ];
  export type OutputTuple = [
    policyId: bigint,
    vehicleId: bigint,
    premium: bigint,
    coverage: bigint,
    user: string,
    insurers: string[]
  ];
  export interface OutputObject {
    policyId: bigint;
    vehicleId: bigint;
    premium: bigint;
    coverage: bigint;
    user: string;
    insurers: string[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace QuotationAddedEvent {
  export type InputTuple = [
    quotationId: BigNumberish,
    premium: BigNumberish,
    coverage: BigNumberish
  ];
  export type OutputTuple = [
    quotationId: bigint,
    premium: bigint,
    coverage: bigint
  ];
  export interface OutputObject {
    quotationId: bigint;
    premium: bigint;
    coverage: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace QuotationUpdatedEvent {
  export type InputTuple = [
    quotationId: BigNumberish,
    premium: BigNumberish,
    coverage: BigNumberish
  ];
  export type OutputTuple = [
    quotationId: bigint,
    premium: bigint,
    coverage: bigint
  ];
  export interface OutputObject {
    quotationId: bigint;
    premium: bigint;
    coverage: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface PolicyManagement extends BaseContract {
  connect(runner?: ContractRunner | null): PolicyManagement;
  waitForDeployment(): Promise<this>;

  interface: PolicyManagementInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addQuotation: TypedContractMethod<
    [premium: BigNumberish, coverage: BigNumberish, chain: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  approveClaim: TypedContractMethod<
    [claimId: BigNumberish],
    [void],
    "nonpayable"
  >;

  claims: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, string, bigint, string, bigint, bigint] & {
        policyId: bigint;
        claimAmount: bigint;
        reason: string;
        status: bigint;
        createdBy: string;
        createdAt: bigint;
        updatedAt: bigint;
      }
    ],
    "view"
  >;

  createPolicy: TypedContractMethod<
    [vehicleId: BigNumberish, quotationIds: BigNumberish[]],
    [bigint],
    "nonpayable"
  >;

  denyClaim: TypedContractMethod<[claimId: BigNumberish], [void], "nonpayable">;

  getClaim: TypedContractMethod<
    [claimId: BigNumberish],
    [PolicyManagement.ClaimStructOutput],
    "view"
  >;

  getInsurerPolicies: TypedContractMethod<
    [insurer: AddressLike],
    [bigint[]],
    "view"
  >;

  getPolicy: TypedContractMethod<
    [policyId: BigNumberish],
    [PolicyManagement.PolicyStructOutput],
    "view"
  >;

  getPolicyClaims: TypedContractMethod<
    [policyId: BigNumberish],
    [bigint[]],
    "view"
  >;

  getQuotations: TypedContractMethod<
    [],
    [PolicyManagement.QuotationStructOutput[]],
    "view"
  >;

  getUserPolicies: TypedContractMethod<[user: AddressLike], [bigint[]], "view">;

  insurerPolicies: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  policies: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        bigint,
        bigint,
        bigint,
        string,
        bigint,
        bigint,
        bigint,
        bigint
      ] & {
        vehicleId: bigint;
        premium: bigint;
        coverage: bigint;
        status: bigint;
        user: string;
        coverageUsed: bigint;
        coverageRemaining: bigint;
        createdAt: bigint;
        updatedAt: bigint;
      }
    ],
    "view"
  >;

  policyClaims: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  quotationList: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [
      [bigint, bigint, bigint, string, bigint, bigint, bigint, bigint] & {
        quotationId: bigint;
        chain: bigint;
        premium: bigint;
        insurer: string;
        coverage: bigint;
        coverageUsed: bigint;
        createdAt: bigint;
        updatedAt: bigint;
      }
    ],
    "view"
  >;

  quotations: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, bigint, string, bigint, bigint, bigint, bigint] & {
        quotationId: bigint;
        chain: bigint;
        premium: bigint;
        insurer: string;
        coverage: bigint;
        coverageUsed: bigint;
        createdAt: bigint;
        updatedAt: bigint;
      }
    ],
    "view"
  >;

  requestClaim: TypedContractMethod<
    [policyId: BigNumberish, claimAmount: BigNumberish, reason: BytesLike],
    [bigint],
    "nonpayable"
  >;

  updateQuotation: TypedContractMethod<
    [quotationId: BigNumberish, premium: BigNumberish, coverage: BigNumberish],
    [void],
    "nonpayable"
  >;

  userPolicies: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addQuotation"
  ): TypedContractMethod<
    [premium: BigNumberish, coverage: BigNumberish, chain: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "approveClaim"
  ): TypedContractMethod<[claimId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "claims"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, string, bigint, string, bigint, bigint] & {
        policyId: bigint;
        claimAmount: bigint;
        reason: string;
        status: bigint;
        createdBy: string;
        createdAt: bigint;
        updatedAt: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "createPolicy"
  ): TypedContractMethod<
    [vehicleId: BigNumberish, quotationIds: BigNumberish[]],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "denyClaim"
  ): TypedContractMethod<[claimId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getClaim"
  ): TypedContractMethod<
    [claimId: BigNumberish],
    [PolicyManagement.ClaimStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getInsurerPolicies"
  ): TypedContractMethod<[insurer: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getPolicy"
  ): TypedContractMethod<
    [policyId: BigNumberish],
    [PolicyManagement.PolicyStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPolicyClaims"
  ): TypedContractMethod<[policyId: BigNumberish], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getQuotations"
  ): TypedContractMethod<
    [],
    [PolicyManagement.QuotationStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserPolicies"
  ): TypedContractMethod<[user: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "insurerPolicies"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "policies"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        bigint,
        bigint,
        bigint,
        string,
        bigint,
        bigint,
        bigint,
        bigint
      ] & {
        vehicleId: bigint;
        premium: bigint;
        coverage: bigint;
        status: bigint;
        user: string;
        coverageUsed: bigint;
        coverageRemaining: bigint;
        createdAt: bigint;
        updatedAt: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "policyClaims"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "quotationList"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [
      [bigint, bigint, bigint, string, bigint, bigint, bigint, bigint] & {
        quotationId: bigint;
        chain: bigint;
        premium: bigint;
        insurer: string;
        coverage: bigint;
        coverageUsed: bigint;
        createdAt: bigint;
        updatedAt: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "quotations"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, bigint, string, bigint, bigint, bigint, bigint] & {
        quotationId: bigint;
        chain: bigint;
        premium: bigint;
        insurer: string;
        coverage: bigint;
        coverageUsed: bigint;
        createdAt: bigint;
        updatedAt: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "requestClaim"
  ): TypedContractMethod<
    [policyId: BigNumberish, claimAmount: BigNumberish, reason: BytesLike],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateQuotation"
  ): TypedContractMethod<
    [quotationId: BigNumberish, premium: BigNumberish, coverage: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "userPolicies"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  getEvent(
    key: "ClaimRequested"
  ): TypedContractEvent<
    ClaimRequestedEvent.InputTuple,
    ClaimRequestedEvent.OutputTuple,
    ClaimRequestedEvent.OutputObject
  >;
  getEvent(
    key: "ClaimStatusUpdated"
  ): TypedContractEvent<
    ClaimStatusUpdatedEvent.InputTuple,
    ClaimStatusUpdatedEvent.OutputTuple,
    ClaimStatusUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "PolicyCreated"
  ): TypedContractEvent<
    PolicyCreatedEvent.InputTuple,
    PolicyCreatedEvent.OutputTuple,
    PolicyCreatedEvent.OutputObject
  >;
  getEvent(
    key: "QuotationAdded"
  ): TypedContractEvent<
    QuotationAddedEvent.InputTuple,
    QuotationAddedEvent.OutputTuple,
    QuotationAddedEvent.OutputObject
  >;
  getEvent(
    key: "QuotationUpdated"
  ): TypedContractEvent<
    QuotationUpdatedEvent.InputTuple,
    QuotationUpdatedEvent.OutputTuple,
    QuotationUpdatedEvent.OutputObject
  >;

  filters: {
    "ClaimRequested(uint256,uint256,uint256,uint8)": TypedContractEvent<
      ClaimRequestedEvent.InputTuple,
      ClaimRequestedEvent.OutputTuple,
      ClaimRequestedEvent.OutputObject
    >;
    ClaimRequested: TypedContractEvent<
      ClaimRequestedEvent.InputTuple,
      ClaimRequestedEvent.OutputTuple,
      ClaimRequestedEvent.OutputObject
    >;

    "ClaimStatusUpdated(uint256,uint8)": TypedContractEvent<
      ClaimStatusUpdatedEvent.InputTuple,
      ClaimStatusUpdatedEvent.OutputTuple,
      ClaimStatusUpdatedEvent.OutputObject
    >;
    ClaimStatusUpdated: TypedContractEvent<
      ClaimStatusUpdatedEvent.InputTuple,
      ClaimStatusUpdatedEvent.OutputTuple,
      ClaimStatusUpdatedEvent.OutputObject
    >;

    "PolicyCreated(uint256,uint256,uint256,uint256,address,address[])": TypedContractEvent<
      PolicyCreatedEvent.InputTuple,
      PolicyCreatedEvent.OutputTuple,
      PolicyCreatedEvent.OutputObject
    >;
    PolicyCreated: TypedContractEvent<
      PolicyCreatedEvent.InputTuple,
      PolicyCreatedEvent.OutputTuple,
      PolicyCreatedEvent.OutputObject
    >;

    "QuotationAdded(uint256,uint256,uint256)": TypedContractEvent<
      QuotationAddedEvent.InputTuple,
      QuotationAddedEvent.OutputTuple,
      QuotationAddedEvent.OutputObject
    >;
    QuotationAdded: TypedContractEvent<
      QuotationAddedEvent.InputTuple,
      QuotationAddedEvent.OutputTuple,
      QuotationAddedEvent.OutputObject
    >;

    "QuotationUpdated(uint256,uint256,uint256)": TypedContractEvent<
      QuotationUpdatedEvent.InputTuple,
      QuotationUpdatedEvent.OutputTuple,
      QuotationUpdatedEvent.OutputObject
    >;
    QuotationUpdated: TypedContractEvent<
      QuotationUpdatedEvent.InputTuple,
      QuotationUpdatedEvent.OutputTuple,
      QuotationUpdatedEvent.OutputObject
    >;
  };
}
